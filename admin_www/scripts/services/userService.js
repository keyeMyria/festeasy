// Generated by CoffeeScript 1.4.0

app.factory('userService', [
  '$rootScope', 'Restangular', '$http', '$q', 'localStorageService', function($rootScope, Restangular, $http, $q, localStorageService) {
    var configure_http, create_guest_user, create_normal_user, fac, get, get_session, get_user, is_guest, is_signed_in, load_session_from_cookie, persist_to_cookie, rest, session, set_session, set_user, signin, signout, user,
      _this = this;
    fac = {};
    user = null;
    session = null;
    rest = function() {
      if (!session) {
        throw 'No user logged in, cannot get rest().';
      }
      return Restangular.one('users', session.user_id);
    };
    is_signed_in = function() {
      if (session) {
        return true;
      }
      return false;
    };
    is_guest = function() {
      if (is_signed_in() && user && user.is_guest) {
        return true;
      }
      return false;
    };
    get_session = function() {
      return session;
    };
    set_session = function(new_session) {
      return session = new_session;
    };
    get_user = function() {
      return user;
    };
    set_user = function(new_user) {
      return user = new_user;
    };
    create_guest_user = function(guest_token) {
      var deferred, kwargs, promise;
      deferred = $q.defer();
      kwargs = {
        'guest_token': guest_token
      };
      promise = Restangular.all('users').post(kwargs);
      promise.then(function(data) {
        set_session(data.session);
        set_user(data.user);
        configure_http();
        persist_to_cookie();
        return deferred.resolve(data);
      }, function(error) {
        return deferred.reject(error);
      });
      return deferred.promise;
    };
    create_normal_user = function(email_address, password, first_name, guest_token) {
      var deferred, kwargs, promise;
      deferred = $q.defer();
      kwargs = {
        'email_address': email_address,
        'password': password,
        'first_name': first_name,
        'guest_token': guest_token
      };
      promise = Restangular.all('users').post(kwargs);
      promise.then(function(data) {
        set_session(data.session);
        set_user(data.user);
        configure_http();
        persist_to_cookie();
        return deferred.resolve(data);
      }, function(error) {
        return deferred.reject(error);
      });
      return deferred.promise;
    };
    signin = function(email_address, password) {
      var deferred, kwargs, promise;
      deferred = $q.defer();
      kwargs = {
        'email_address': email_address,
        'password': password
      };
      promise = Restangular.all('sessions').post(kwargs);
      promise.then(function(data) {
        set_session(data.session);
        set_user(data.user);
        configure_http();
        persist_to_cookie();
        return deferred.resolve(data);
      }, function(error) {
        return deferred.reject(error);
      });
      return deferred.promise;
    };
    signout = function() {
      var deferred, promise;
      deferred = $q.defer();
      promise = Restangular.one('sessions', session.id).remove();
      promise.then(function(data) {
        return deferred.resolve(data);
      }, function(error) {
        return deferred.reject(error);
      });
      promise["finally"](function(data) {
        set_session(null);
        set_user(null);
        return persist_to_cookie();
      });
      return deferred.promise;
    };
    get = function() {
      var deferred;
      deferred = $q.defer();
      rest().get().then(function(data) {
        user = data.user;
        return deferred.resolve(data);
      }, function(error) {
        return deferred.reject(error);
      });
      return deferred.promise;
    };
    persist_to_cookie = function() {
      return localStorageService.set('session', session);
    };
    load_session_from_cookie = function() {
      var stored_session;
      stored_session = localStorageService.get('session');
      if (stored_session) {
        set_session(stored_session);
        configure_http();
        return console.log('Current session token: ' + session.token);
      } else {
        return console.log('Not loading from cookie.');
      }
    };
    configure_http = function() {
      return $http.defaults.headers.common.Authorization = 'xBasic ' + btoa('api:' + session.token);
    };
    fac.get_user = get_user;
    fac.get_session = get_session;
    fac.load_session_from_cookie = load_session_from_cookie;
    fac.is_signed_in = is_signed_in;
    fac.is_guest = is_guest;
    fac.get = get;
    fac.signout = signout;
    fac.signin = signin;
    fac.create_normal_user = create_normal_user;
    fac.create_guest_user = create_guest_user;
    fac.user = user;
    fac.session = session;
    fac.rest = rest;
    return fac;
  }
]);
